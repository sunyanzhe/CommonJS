require命令
    1.基本用法
        Node使用CommonJS模块规范,内置的require命令用于加载模块文件.

        require命令的基本功能是,读入并执行一个JavaScript文件,然后返回该模块的exports对象.
        如果没有发现指定模块,会报错

        var invisible=function(){
            cosnole.log('invisible');
        }
        exports.message='hi';
        exports.say=function(){
            console.log(message);
        };

        运行下面的命令,可以输出exports对象;
        var example=require('./example.js');
        example
        {
            message:"hi",
            say:[Function]
        }

        如果模块输出的是一个函数,那就不能定义在exports对象上面,而要定义在module.exports变量上面.
        module.exports=function(){
            console.log('hello world');
        }
        require('./example2.js')();
        上面代码中,require命令调用自身,等于是执行module.exports,因此会输出hello world
    
    2.加载规则
        require命令用于加载文件,后缀名默认为.js
        var foo=require('foo');
        //等同于
        var foo=require('foo.js');
        根据参数的不同格式,require命令去不同路径寻找模块文件.
            (1)如果参数字符串以'/'开头,则表示加载的是一个位于绝对路径的模块文件.比如,require('/home/marco/foo.js')将加载/home/marco/foo.js
            (2)如果参数字符串以'./'开头,则表示加载的是一个位于相对路径(跟当前执行脚本的位置相比)的模块文件.比如,require('./circle')将加载当前脚本同一目录的circle.js
            (3)如果参数字符串不以'./'或'/'开头,则表示加载的是一个默认提供的核心模块(位于Node的系统安装目录中),或者一个位于各级node modules目录的已安装模块(全局安装或局部安装).
        
            举例来说,脚本/home/user/projects/foo.js执行了require('bar.js')命令,Node会依次搜索以下文件
            >/user/local/lib/node/bar.js
            >/home/user/projects/node_modules/bar.js
            >/home/user/node_modules/bar.js
            >/home/node_modules/bar.js
            >/node_modules/bar.js

            这样设计的目的是,使得不同的模块可以将所依赖的模块本地化

            (4)如果参数不以'./'或'/'开头,而且是一个路径,比如require('example-module/path/to/file'),则将先找到example-module的位置,然后再以他为参数,找到后续路径.
            (5)如果指定的模块文件没有发现,Node会尝试为文件名添加.js、.json、.node后,再去搜索. 
               .js文件会以文本格式的JavaScript脚本解析,.json文件会以JSON格式的文本文件解析,.node文件会以编译后的二进制文件解析
            (6)如果想得到require命令加载的确切文件名,使用require.resolve()方法.

    3.目录的加载规则
        通常,我们会把相关的文件会放在一个目录里面,便于组织.这时,最好为该目录设置一个入口文件,让require方法可以通过这个入口文件,加载整个目录.
        在目录中防止一个package.json文件,并且将入口文件写入main字段.下面是一个例子
        //package.json
        { "name":"some-library",
          "main":"./lib/some-library.js" }
        
        require发现参数字符串指向一个目录以后,会自动查看该目录的package.json文件,然后加载main字段指定的入口文件.
        如果package.json文件没有main字段,或者根本没有package.json文件,则会加载该目录下的index.js文件或index.node文件

    4.模块的缓存
        第一次加载某个模块时,Node会缓存该模块.以后再加载该模块,就直接从缓存取出该模块的module.exports
        //example3.js
        var message='hi'
        exports.message=message;

        //test3.js
        console.log(require('./example3').message);         //hi
        require('./example3').message='hello';
        console.log(require('./example3').message);         //hello

        上面的代码中,连续三次使用require命令,加载同一个模块.
        第一次加载的时候,message属性的值为'hi'.
        第二次加载的时候,将message属性的值修改为"hello".
        但是当第三次加载的时候,message属性变为了'hello'.
        这就证明require命令并没有重新加载模块文件,而是输出了缓存

        如果想要多次执行某个模块,可以让该模块输出一个函数,然后每次require这个模块的时候,重新执行以下输出的函数.
        所有缓存的模块保存在了require.cache之中,如果想删除模块的缓存,可以像下面这样写

        //删除指定模块的缓存
        delete require.cache[moduleName];

        //删除所有模块的缓存
        for(let key of Object.keys(require.cache)){
            delete require.cache[key]
        }
        注意,缓存时根据绝对路径识别模块的,如果同样的模块名,但是保存在不同的路径,require还是会重新加载该模块

    5.环境变量NODE_PATH
        Node执行一个脚本时,会先查看环境变量NODE_PATH.它是一组以冒号分隔的绝对路径.再去偷塔位置到不到指定模块时,Node会去这些路径查找.
        可以将NODE_PATH添加到.bashrc.

        export NODE_PATH='/user/local/lib/node'

        所以,如果遇到复杂的相对路径,比如下面这样.
        var myModule=require('../../../../lib/myModule');

        有两种解决方法,一是将该文件假如node_modules目录,二是修改NODE_PATH环境变量,package.json文件可以采用下面的写法.
        {
            'name':'node_path',
            'version':'1.0.0',
            'description':'',
            'main':'index.js',
            'scripts':{
                'start':'NODE_PATH=lib node index.js'
            },
            'author':'',
            'license':'ISC'
        }

        NODE_PATH是历史遗留下来的一个路径解决方案,通常不应该使用,而应该使用node_modules目录机制

    6.模块的循环加载
        如果发生模块的循环加载,即A加载B,B又加载A,则B将加载A的不完整版本.

        //a.js
        exports.x='a1';
        console.log('a.js',require('./b.js').x);
        exports.x='a2';

        //b.js
        exports.x='b1';
        console.log('b.js',require('./a.js').x);
        exports.x='b2';

        //main.js
        console.log('main.js',require('./a.js').x);
        console.log('main.js',require('./b.js').x);

        上面代码是三个JavaScript文件,其中,a.js加载了b.js,而b.js又加载了a.js.
        这是,Node返回a.js的不完整版本,所以执行结果如下.
        
        $ node main.js
        b.js a1
        a.js b2
        main.js a2
        main.js b2

        修改main.js再次加载a.js和b.js

        //main.js
        cosnole.log('main.js',require('./a.js').x);
        cosnole.log('main.js',require('./b.js').x);
        cosnole.log('main.js',require('./a.js').x);
        cosnole.log('main.js',require('./b.js').x);

        执行上面代码,结果如下

        $node main.js
        b.js a1
        a.js b2
        main.js a2
        main.js b2
        main.js a2
        main.js b2

        上面代码中,第二次加载a.js和b.js时,会直接从缓存读取exports属性,所以a.js和b.js内部的console.log语句都不会执行了

    7.require.main
        require方法有一个main属性,可以用来判断模块是直接执行,还是被调用执行.
        直接执行的时候(node moudule.js),require.main属性指向模块本身.
        require.main === module;
        //true

        调用执行的时候(通过require加载该脚本执行),上面的表达式返回false.