概述
    Node应用由模块组成,采用CommonJS模块规范
    每个文件就是一个模块,有自己的作用域.在一个文件里面定义的变量、函数、类,都是私有的,对其他文件不可见
    //example.js
    var x=5;
    var addX=function(value){
        return value+x;
    }
    上面代码中,变量x和函数addX,是当前文件example.js私有的,其他文件不可见
    如果想在多个文件分享变量,必须定义为global对象的属性.
    global.warning=true;

    上面代码的warning变量,可以被所有文件读取.当然这样的写法是不推荐的.
   
    CommonJS规范规定,每个模块内部,module变量代表当前模块.
    这个变量是一个对象,它的exports属性(即module.exports)使对外的接口
    加载某个模块,其实是加载该模块的module.exports属性
    var x=5;
    var addX=function(value){
        return value+x;
    }
    module.exports.x=x;
    module.exports.addX=addX;

    上面代码通过module.exports输出变量x和函数addX.
    require方法用于加载模块.

    var example=require('./example.js');
    console.log(example.x);             //5
    console.log(example.addX(1));       //6

    require方法的详细解释参见《Require命令》一节
    CommonJS模块的特点如下.
        1.所有代码都运行在模块作用域,不会污染全局作用域
        2.模块可以多次加载,但是只会在第一次加载时运行一次,然后运行结果就被缓存了,以后再加载,就直接读取缓存结果.要想让模块再次运行,必须清除缓存
        3.模块加载的顺序,按照其在代码中出现的顺序